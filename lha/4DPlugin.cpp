/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : lha
 #	author : miyako
 #	2018/03/27
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- lha

		case 1 :
			LHA(pResult, pParams);
			break;

	}
}

// -------------------------------------- lha -------------------------------------

void _cb(char *filename, void *array)
{
	ARRAY_TEXT *arr = (ARRAY_TEXT *)array;
	
	/* convert to HFS */
#if VERSIONMAC
	C_TEXT t;
	t.setUTF8String((const uint8_t *)filename, (uint32_t)strlen(filename));
	NSString *s = t.copyUTF16String();
	NSURL *u = (NSURL *)CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)s, kCFURLPOSIXPathStyle, false);
	if(u)
	{
		NSString *str = (NSString *)CFURLCopyFileSystemPath((CFURLRef)u, kCFURLHFSPathStyle);
		arr->appendUTF16String(str);
		[str release];
		[u release];
	}
	[s release];
#else
	int error = 0;
	int size = strlen(filename);
	int len = MultiByteToWideChar(CP_UTF8, 0, (LPCSTR)filename, size, NULL, 0);
	if (len) 
	{
		std::vector<char> buf((len + 1) * sizeof(wchar_t));
		if (MultiByteToWideChar(CP_UTF8, 0, (LPCSTR)filename, size, (LPWSTR)&buf[0], len)) {
			arr->appendUTF16String((const PA_Unichar *)&buf[0]);
		}
	}
#endif
}

typedef enum
{
	lha_error_none = 0,
	lha_error_extract_archive = 1,
	lha_error_fopen = 2,
	lha_error_input_stream_from_file = 3,
	lha_error_reader_new = 4
}lha_error_t;

void LHA(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	ARRAY_TEXT Param3i;
	ARRAY_TEXT Param3o;
	C_LONGINT returnValue;

	lha_error_t lha_error = lha_error_none;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	Param3i.fromParamAtIndex(pParams, 3);
	
	CUTF8String src;
	Param1.copyPath(&src);
	
	CUTF8String dst;
	Param2.copyPath(&dst);
	
	LHAOptions options;
	options.overwrite_policy = LHA_OVERWRITE_ALL;
	options.quiet = 2;
	options.verbose = 0;
	options.dry_run = 0;
	options.extract_path = (char *)dst.c_str();
	options.use_path = 1;
#if VERSIONWIN
	FILE *fstream = NULL;
	wchar_t	buf[_MAX_PATH];
	if (MultiByteToWideChar(CP_UTF8, 0, (const char *)src.c_str(), -1, (LPWSTR)buf, _MAX_PATH))
		fstream = _wfopen((const wchar_t *)buf, L"rb");
#else
	FILE *fstream = fopen((char *)src.c_str(), "rb");
#endif

	if(fstream)
	{
		LHAInputStream *stream = lha_input_stream_from_FILE(fstream);
		if(stream)
		{
			LHAReader *reader = lha_reader_new(stream);
			if(reader)
			{
				unsigned int num_filters = 0;
				size_t count_filters = Param3i.getSize();
				
				std::vector<CUTF8String>_filters(count_filters);
				std::vector<char *>filters(count_filters);
				
				for(uint32_t i = 0; i < count_filters;++i)
				{
					Param3i.copyUTF8StringAtIndex(&_filters.at(i), i);
					if(_filters.at(i).size())
					{
						filters.at(num_filters++) = (char *)_filters.at(i).c_str();
					};
				}
				
				LHAFilter filter;
				filter.num_filters = 0;
				filter.reader = reader;
				filter.filters = NULL;
				
				if(num_filters)
				{
					lha_filter_init(&filter, reader, &filters[0], num_filters);
				}
				
				void (*_PA_YieldAbsolute)(void) = PA_YieldAbsolute;
				Param3o.setSize(1);
				
				if(!extract_archive(&filter, &options, _PA_YieldAbsolute, _cb, &Param3o))
				{
					lha_error = lha_error_extract_archive;
				}
				
				lha_reader_free(reader);
			}else{lha_error = lha_error_reader_new;}
			lha_input_stream_free(stream);
		}else{lha_error = lha_error_input_stream_from_file;}
		fclose(fstream);
	}else{lha_error = lha_error_fopen;};
	
	Param3o.toParamAtIndex(pParams, 3);
	
	returnValue.setIntValue(lha_error);
	returnValue.setReturn(pResult);
}

